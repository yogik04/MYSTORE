// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: q7GsKSKBAN3BeuhzrgUjPJ
// Component: a-kQ_FGuOezt
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { ProductCollection } from "@plasmicpkgs/commerce"; // plasmic-import: vU2jzVAnFP/codeComponent
import { ProductMedia } from "@plasmicpkgs/commerce"; // plasmic-import: qpULM0wwWW/codeComponent
import { ProductTextField } from "@plasmicpkgs/commerce"; // plasmic-import: S1F4q0wN6b/codeComponent
import { ProductSlider } from "@plasmicpkgs/commerce"; // plasmic-import: 5k_ZYl4EkcYi/codeComponent
import { ProductQuantity } from "@plasmicpkgs/commerce"; // plasmic-import: CjfQQrwiHjD/codeComponent
import { ProductPriceComponent } from "@plasmicpkgs/commerce"; // plasmic-import: _PaJxGc8gf/codeComponent
import { AddToCartButton } from "@plasmicpkgs/commerce"; // plasmic-import: NR7KYUJmEqx/codeComponent
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: q7GsKSKBAN3BeuhzrgUjPJ/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: a-kQ_FGuOezt/css

export const PlasmicHomepage__VariantProps = new Array();

export const PlasmicHomepage__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicHomepage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "textbox.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "1"
      },
      {
        path: "textbox.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "1"
      },
      {
        path: "textbox.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "1"
      }
    ],

    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            <h1
              data-plasmic-name={"h1"}
              data-plasmic-override={overrides.h1}
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1
              )}
            >
              {"Your Store"}
            </h1>
            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text
              )}
            >
              <React.Fragment>
                <React.Fragment>
                  {
                    "If you haven't already done so, go back and learn the basics by going through the Plasmic Levels tutorial.\n\nIt's always easier to start from examples! Add a new page using a template—do this from the list of pages in the top toolbar.\n\nOr press the big blue + button to start inserting items into this page.\n\nIntegrate this project into your codebase—press the "
                  }
                </React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {"Code"}
                </span>
                <React.Fragment>
                  {
                    " button in the top right and follow the quickstart instructions.\n\nJoin our Slack community (icon in bottom left) for help any time."
                  }
                </React.Fragment>
              </React.Fragment>
            </div>
          </section>
          <ProductCollection
            data-plasmic-name={"productCollection"}
            data-plasmic-override={overrides.productCollection}
            className={classNames("__wab_instance", sty.productCollection)}
            emptyMessage={
              <ph.DataCtxReader>
                {$ctx => (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__eFy2O
                    )}
                  >
                    {"No product found!"}
                  </div>
                )}
              </ph.DataCtxReader>
            }
            loadingMessage={
              <ph.DataCtxReader>
                {$ctx => (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__sc0Q0
                    )}
                  >
                    {"Loading..."}
                  </div>
                )}
              </ph.DataCtxReader>
            }
          >
            <ph.DataCtxReader>
              {$ctx => (
                <div
                  data-plasmic-name={"freeBox"}
                  data-plasmic-override={overrides.freeBox}
                  className={classNames(projectcss.all, sty.freeBox)}
                >
                  <ProductMedia
                    data-plasmic-name={"productMedia"}
                    data-plasmic-override={overrides.productMedia}
                    className={classNames("__wab_instance", sty.productMedia)}
                  />

                  <ProductTextField
                    data-plasmic-name={"productTextField"}
                    data-plasmic-override={overrides.productTextField}
                    className={classNames(
                      "__wab_instance",
                      sty.productTextField
                    )}
                    field={"name"}
                  />

                  {true ? (
                    <ProductSlider
                      data-plasmic-name={"productSlider"}
                      data-plasmic-override={overrides.productSlider}
                      className={classNames(
                        "__wab_instance",
                        sty.productSlider
                      )}
                      slideContainer={
                        <ph.DataCtxReader>
                          {$ctx => (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__ohgdx
                              )}
                            >
                              <ProductMedia
                                className={classNames(
                                  "__wab_instance",
                                  sty.productMedia__ffFNj
                                )}
                              />
                            </div>
                          )}
                        </ph.DataCtxReader>
                      }
                      slideSelected={0}
                      thumbsContainer={
                        <ph.DataCtxReader>
                          {$ctx => (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__rgEe
                              )}
                            >
                              <ProductMedia
                                className={classNames(
                                  "__wab_instance",
                                  sty.productMedia__ggUf
                                )}
                              />
                            </div>
                          )}
                        </ph.DataCtxReader>
                      }
                      thumbsVisible={4}
                    />
                  ) : null}
                  {true ? (
                    <ProductQuantity
                      data-plasmic-name={"productQuantity"}
                      data-plasmic-override={overrides.productQuantity}
                      className={classNames(
                        "__wab_instance",
                        sty.productQuantity
                      )}
                    >
                      <input
                        className={classNames(
                          projectcss.all,
                          projectcss.input,
                          sty.textInput__zei6M
                        )}
                        onChange={e => {
                          p.generateStateOnChangeProp($state, [
                            "textbox",
                            "value"
                          ])(e.target.value);
                        }}
                        ref={ref => {
                          $refs[undefined] = ref;
                        }}
                        size={1}
                        type={"text"}
                        value={p.generateStateValueProp($state, [
                          "textbox",
                          "value"
                        ])}
                      />
                    </ProductQuantity>
                  ) : null}
                  <ProductPriceComponent
                    data-plasmic-name={"productPrice"}
                    data-plasmic-override={overrides.productPrice}
                    className={classNames("__wab_instance", sty.productPrice)}
                  />

                  <AddToCartButton
                    data-plasmic-name={"addToCartButton"}
                    data-plasmic-override={overrides.addToCartButton}
                    className={classNames(
                      "__wab_instance",
                      sty.addToCartButton
                    )}
                  >
                    <button
                      className={classNames(
                        projectcss.all,
                        projectcss.button,
                        projectcss.__wab_text,
                        sty.button__e40LW
                      )}
                    >
                      {"Add To Cart"}
                    </button>
                  </AddToCartButton>
                </div>
              )}
            </ph.DataCtxReader>
          </ProductCollection>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "section",
    "h1",
    "text",
    "productCollection",
    "freeBox",
    "productMedia",
    "productTextField",
    "productSlider",
    "productQuantity",
    "productPrice",
    "addToCartButton"
  ],

  section: ["section", "h1", "text"],
  h1: ["h1"],
  text: ["text"],
  productCollection: [
    "productCollection",
    "freeBox",
    "productMedia",
    "productTextField",
    "productSlider",
    "productQuantity",
    "productPrice",
    "addToCartButton"
  ],

  freeBox: [
    "freeBox",
    "productMedia",
    "productTextField",
    "productSlider",
    "productQuantity",
    "productPrice",
    "addToCartButton"
  ],

  productMedia: ["productMedia"],
  productTextField: ["productTextField"],
  productSlider: ["productSlider"],
  productQuantity: ["productQuantity"],
  productPrice: ["productPrice"],
  addToCartButton: ["addToCartButton"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent("section"),
    h1: makeNodeComponent("h1"),
    text: makeNodeComponent("text"),
    productCollection: makeNodeComponent("productCollection"),
    freeBox: makeNodeComponent("freeBox"),
    productMedia: makeNodeComponent("productMedia"),
    productTextField: makeNodeComponent("productTextField"),
    productSlider: makeNodeComponent("productSlider"),
    productQuantity: makeNodeComponent("productQuantity"),
    productPrice: makeNodeComponent("productPrice"),
    addToCartButton: makeNodeComponent("addToCartButton"),
    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "MYSTORE",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
